1．假设所有变量的类型都是 int，下列各项变量的值是多少：
a．x = (2 + 3) * 6;                   答：30
b．x = (12 + 6)/2*3;                  答：27
c．y = x = (2 + 3)/4;                 答：x = y = 1
d．y = 3 + 2*(x = 7/2);               答：y = 9;x = 3
  
2．假设所有变量的类型都是 int，下列各项变量的值是多少：
a．x = (int)3.8 + 3.3;                答:6
b．x = (2 + 3) * 10.5;                答:52
c．x = 3 / 5 * 22.0;                  答:0
d．x = 22.0 * 3 / 5;                  答:13
  
3．对下列各表达式求值：
a．30.0 / 4.0 * 5.0;                  答:37.5
b．30.0 / (4.0 * 5.0);                答:1.5
c．30 / 4 * 5;                        答:35
d．30 * 5 / 4;                        答:37
e．30 / 4.0 * 5;                      答:.37.5
f．30 / 4 * 5.0;                      答:35.0

4．请找出下面的程序中的错误。
int main(void)
{ 
  int i = 1,
  float n;
  printf("Watch out! Here come a bunch of fractions!\n");
  while (i < 30)
  n = 1/i;
  printf(" %f", n);
  printf("That's all, folks!\n");
  return;
} 
  答：
    #include <stdio.h>
    int main(void)
    {
        int i= 1;
        float n;
        printf("Watch out! Here come a bunch of fractions!\n");
        while(i++< 30)
        {
            n = 1.0/i;
            printf("岩f\n",n);
        }
        printf("That's all,folks!\n");
        return 0;
    }


5．这是程序清单 5.9 的另一个版本。从表面上看，该程序只使用了一条 scanf()语句，
  比程序清单5.9 简单。请找出不如原版之处。
  #include <stdio.h>
  #define S_TO_M 60
  int main(void)
  { 
       int sec, min, left;
       printf("This program converts seconds to minutes and ");
       printf("seconds.\n");
       printf("Just enter the number of seconds.\n");
       printf("Enter 0 to end the program.\n");
       while (sec > 0) {
            scanf("%d", &sec);
            min = sec/S_TO_M;
            left = sec % S_TO_M;
            printf("%d sec is %d min, %d sec. \n", sec, min, left);
            printf("Next input?\n");
       } 
   printf("Bye!\n"); 
   return 0;
  }
  这个版本最大的问题是测试条件(sec是否大于0?)和scanf()语句获取 sec变量的值之间的
关系。具体地说，第一次测试时，程序尚未获得 sec的值，用来与0作比较的是正好在sec变量
内存位置上的一个垃圾值。一个比较笨拙的方法是初始化 sec(如，初始化为1)。这样就可通过
第一次测试。不过，还有另一个问题。当最后输入0结束程序时，在循环结束之前不会检查sec,
所以0也被打印了出来。因此，更好的方法是在while测试之前使用 scanf()语句。可以这样
修改：
  
scanf("8d",&sec);
while( sec >0){
    min = sec/S_TO_M;
    left = sec S_TO_M;
    printf("8d sec is 8d min,8d sec. \n", sec, min,left);
    printf("Next input?\n");
    scanf("8d",&sec);
}
while循环第一轮迭代使用的是scanf()在循环外面获取的值。因此，在while循环的末尾还要
使用一次 scanf()语句。这是处理类似问题的常用方法。

6、（略）
注意：
  printf("%s! C is cool!\n", "%s! C is cool!\n");	
	// C语言将第二个双引号中的内容视为字符串，
	// 替换第一个中的%s得到：
	/*%s! C is cool!
! C is cool!*/

7、（略）

8、（略）

9、（略）

10．假设下面是完整程序中的一部分，它们分别打印什么？
a．
   int x = 0;
   while (++x < 3)
      printf("%4d", x);

答： 1 2
  
b．
   int x = 100;
   while (x++ < 103)
      printf("%4d\n",x);
      printf("%4d\n",x);

答：101
    102
    103
    104
  注意，这次x先比较后递增。在示例a中，x都是在先递增后打印。另外还要注意，虽然第
2个printf()语句缩进了，但是这并不意味着它是while 循环的一部分。因此，在while循
环结束后，才会调用一次该 printf()语句。
  
c．
   char ch = 's';
   while (ch < 'w')
   { 
      printf("%c", ch);
      ch++;
   } 
   printf("%c\n",ch);

答：stuvw
该例中，在第1次调用 printf()语句后才会递增ch。

11．下面的程序会打印出什么？
  #define MESG "COMPUTER BYTES DOG"
  #include <stdio.h>
  int main(void)
  { 
     int n = 0;
     while ( n < 5 )
          printf("%s\n", MESG); 
     n++;
     printf("That's all.\n"); 
     return 0;
  } 

答：这个程序有点问题。while循环没有用花括号把两个缩进的语句括起来，只有printf()是循环
的一部分，所以该程序一直重复打印消息COMPUTER BYTES DOG,直到强行关闭程序为止。
  
12．分别编写一条语句，完成下列各任务（或者说，使其具有以下副作用）：
  a．将变量 x 的值增加 10                  答：x+=10;
  b．将变量 x 的值增加 1                   答：x+=1;
  c．将 a 与 b 之和的两倍赋给 c            答：c = 2(a+b)
  d．将 a 与 b 的两倍之和赋给 c            答：c = a+2*b;
  
13．分别编写一条语句，完成下列各任务：
  a．将变量 x 的值减少 1                 答:  x--;
  b．将 n 除以 k 的余数赋给 m                 答：m =  n% k;
  c．q 除以 b 减去 a，并将结果赋给 p                 答：p = q/(b-a);
  d．a 与 b 之和除以 c 与 d 的乘积，并将结果赋给 x                 答：x = (a+b)/c/d;
